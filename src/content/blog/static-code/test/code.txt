#include <bits/stdc++.h>
using namespace std;
#pragma GCC optimize("O3,unroll-loops")

/*
    Problem Link   : https://leetcode.com/problems/maximum-number-of-events-that-can-be-attended/description/
    Company Tags   : None
    Youtube Link   : None
    Custom  Link   : None
    Similarities   : None
*/

// Approach-1 (Normal)
// TC : O()
// SC : O()
class Solution {
   public:
    int maxEvents(vector<vector<int>>& e) {
        sort(e.begin(), e.end());

        for (int i = 0; i < e.size() - 1; i++) {
            int c_st = e[i][0];
            int c_et = e[i][1];

            int n_st = e[i + 1][0];
            int n_et = e[i + 1][1];

            if (c_et > n_st){
                
            }

            cout << c_st << c_et << endl;
        }

        return -1;
    }
};

int main() {
    vector<vector<int>> arr = {{1, 2}, {2, 3}, {3, 4}, {1, 2}};
    Solution sol;
    int ans = sol.maxEvents(arr);
    cout << "ans --> " << ans << endl;
}